#cloud-config

coreos:
  etcd2:
    name: <MEMBER-NAME>
    initial-cluster: <INITIAL-CLUSTER>
    initial-advertise-peer-urls: https://$private_ipv4:2380
    listen-peer-urls: https://$private_ipv4:2380
    advertise-client-urls: https://$private_ipv4:2379
    listen-client-urls: https://$private_ipv4:2379,http://127.0.0.1:2379,http://127.0.0.1:4001
    peer-cert-file: /etc/ssl/etcd/server.pem
    peer-key-file: /etc/ssl/etcd/server-key.pem
    cert-file: /etc/ssl/etcd/server.pem
    key-file: /etc/ssl/etcd/server-key.pem
    trusted-ca-file: /etc/ssl/certs/cluster-ca.pem
    peer-trusted-ca-file: /etc/ssl/certs/cluster-ca.pem
    #initial-cluster-state: new
  fleet:
    public-ip: $private_ipv4
  flannel:
    interface: $private_ipv4
  update:
      reboot-strategy: etcd-lock
  units:
    - name: etcd2.service
      command: start
    - name: cluster-member-ssl.service
      enable: true
      content: |
        [Unit]
        Description=ssl for node generation
        Before=etcd2.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        EnvironmentFile=/etc/environment
        WorkingDirectory=/mnt/cluster-files
        Environment=JSON='{"CN":"%H","hosts":["PUBLIP","PRIVIP","%H"],"key":{"algo":"rsa","size":2048}}'

        # Generate cert
        ExecStartPre=/bin/bash -c 'echo ${JSON} | sed -e "s#PUBLIP#${COREOS_PUBLIC_IPV4}#;s#PRIVIP#$COREOS_PRIVATE_IPV4#;" > /tmp/ssl-config.json'
        ExecStartPre=/bin/bash -c "cat /tmp/ssl-config.json \
            | bin/cfssl_linux-amd64 gencert -ca=ssl/cluster-ca.pem -ca-key=ssl/cluster-ca-key.pem -config=ca-config.json -profile=server - \
            | bin/cfssljson_linux-amd64 -bare %H-server \
            && mv %H-server* ssl/ "

        # Copy certs to their final destination
        ExecStartPre=/bin/mkdir -p /etc/ssl/etcd
        ExecStartPre=/bin/cp ssl/cluster-ca.pem /etc/ssl/certs/
        ExecStartPre=/bin/cp ssl/%H-server.pem /etc/ssl/etcd/server.pem
        ExecStartPre=/bin/cp ssl/%H-server-key.pem /etc/ssl/etcd/server-key.pem

        # Adjust cert permissions (read etcd)
        ExecStartPre=/bin/bash -c "cd /etc/ssl/etcd && chown -R root:etcd . && chmod 0640 server-key.pem"

        # Update certs
        ExecStart=/sbin/update-ca-certificates

        [Install]
        RequiredBy=etcd2.service
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
             [Service]
             ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "10.1.0.0/16" }'
    - name: fleet.service
      command: start
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API
  
        [Socket]
        ListenStream=2375
        Service=docker.service
        BindIPv6Only=both
  
        [Install]
        WantedBy=sockets.target
