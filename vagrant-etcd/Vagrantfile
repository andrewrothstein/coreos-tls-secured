# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'

Vagrant.require_version ">= 1.6.0"


# Defaults for config options defined in CONFIG

$instance_IPs=["10.0.0.11","10.0.0.12","10.0.0.13"]
#$instance_IPs=["10.0.0.11"]
$instance_name_prefix = "etcd"
$update_channel = "alpha"
$image_version = "current"
$enable_serial_logging = false
$vm_memory = 600 
$vm_cpus = 2
$forwarded_ports = {}


Vagrant.configure("2") do |config|
    # always use Vagrants insecure key
    config.ssh.insert_key = false

    config.vm.box = "coreos-%s" % $update_channel
    if $image_version != "current"
        config.vm.box_version = $image_version
    end
    config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/%s/coreos_production_vagrant.json" % [$update_channel, $image_version]

    config.vm.provider :virtualbox do |v|
        # On VirtualBox, we don't have guest additions or a functional vboxsf
        # in CoreOS, so tell Vagrant that so it can be smarter.
        v.check_guest_additions = false
        v.functional_vboxsf     = false
    end

    # plugin conflict
    if Vagrant.has_plugin?("vagrant-vbguest") then
        config.vbguest.auto_update = false
    end

    $script = <<SCRIPT
    x=$1
    tr -d "\015" < /tmp/to-initial-cluster.sh > /tmp/tic.sh && chmod +x /tmp/tic.sh
    y=$(/tmp/tic.sh $2)
    sed -e "s#<MEMBER-NAME>\#$x#;s#<INITIAL-CLUSTER>\#$y#;" /tmp/etcd-template.yaml > /tmp/vagrantfile-user-data
    mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/
SCRIPT

    $instance_IPs.each.with_index do |ip,i|
        boxIdx = i + 1
        config.vm.define vm_name = "%s%1d" % [$instance_name_prefix, boxIdx] do |c|
            c.vm.hostname = vm_name
            c.vm.network :private_network, ip: ip
            c.vm.synced_folder "../cluster-files", "/mnt/cluster-files"

            c.vm.provision :file, :source => "../bootstrap-files/etcd-template.yaml", :destination => "/tmp/etcd-template.yaml"
            c.vm.provision :file, :source => "../bootstrap-files/to-initial-cluster.sh", :destination => "/tmp/to-initial-cluster.sh"

            c.vm.provision "shell" do |s|
                s.inline = $script
                s.args   = [vm_name,$instance_IPs.join(" ")] 
                s.privileged = true
            end

            if $expose_docker_tcp
                c.vm.network "forwarded_port", guest: 2375, host: ($expose_docker_tcp + boxIdx - 1), auto_correct: true
            end

            $forwarded_ports.each do |guest, host|
                c.vm.network "forwarded_port", guest: guest, host: host, auto_correct: true
            end

            c.vm.provider :virtualbox do |vb|
                vb.memory = $vm_memory
                vb.cpus = $vm_cpus
            end

            if $enable_serial_logging
                logdir = File.join(File.dirname(__FILE__), "log")
                FileUtils.mkdir_p(logdir)

                serialFile = File.join(logdir, "%s-serial.txt" % vm_name)
                FileUtils.touch(serialFile)

                c.vm.provider :virtualbox do |vb, override|
                    vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
                    vb.customize ["modifyvm", :id, "--uartmode1", serialFile]
                end
            end

        end
    end
end
